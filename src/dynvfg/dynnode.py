from __future__ import annotations
from enum import Enum
import os
from capstone import *
from typing import Dict
from typing import List


class REG(Enum):
	invalid = 0
	mem = 1
	UNKNOWN_REG_2 = 2
	rdi = 3
	rsi = 4
	rbp = 5
	rsp = 6
	rbx = 7
	rdx = 8
	rcx = 9
	rax = 10
	r8 = 11
	r9 = 12
	r10 = 13
	r11 = 14
	r12 = 15
	r13 = 16
	r14 = 17
	r15 = 18
	cs = 19
	ss = 20
	ds = 21
	es = 22
	fs = 23
	gs = 24
	rflags = 25
	rip = 26
	al = 27
	ah = 28
	ax = 29
	cl = 30
	ch = 31
	cx = 32
	dl = 33
	dh = 34
	dx = 35
	bl = 36
	bh = 37
	bx = 38
	bp = 39
	si = 40
	di = 41
	sp = 42
	flags = 43
	ip = 44
	edi = 45
	dil = 46
	esi = 47
	sil = 48
	ebp = 49
	bpl = 50
	esp = 51
	spl = 52
	ebx = 53
	edx = 54
	ecx = 55
	eax = 56
	eflags = 57
	eip = 58
	r8l = 59
	r8b = 59
	r8w = 60
	r8d = 61
	r9l = 62
	r9b = 62
	r9w = 63
	r9d = 64
	r10l = 65
	r10b = 65
	r10w = 66
	r10d = 67
	r11b = 68
	r11l = 68
	r11w = 69
	r11d = 70
	r12l = 71
	r12b = 71
	r12w = 72
	r12d = 73
	r13l = 74
	r13b = 74
	r13w = 75
	r13d = 76
	r14b = 77
	r14l = 77
	r14w = 78
	r14d = 79
	r15l = 80
	r15b = 80
	r15w = 81
	r15d = 82
	mm0 = 83
	mm1 = 84
	mm2 = 85
	mm3 = 86
	mm4 = 87
	mm5 = 88
	mm6 = 89
	mm7 = 90
	xmm0 = 91
	xmm1 = 92
	xmm2 = 93
	xmm3 = 94
	xmm4 = 95
	xmm5 = 96
	xmm6 = 97
	xmm7 = 98
	xmm8 = 99
	xmm9 = 100
	xmm10 = 101
	xmm11 = 102
	xmm12 = 103
	xmm13 = 104
	xmm14 = 105
	xmm15 = 106
	xmm16 = 107
	xmm17 = 108
	xmm18 = 109
	xmm19 = 110
	xmm20 = 111
	xmm21 = 112
	xmm22 = 113
	xmm23 = 114
	xmm24 = 115
	xmm25 = 116
	xmm26 = 117
	xmm27 = 118
	xmm28 = 119
	xmm29 = 120
	xmm30 = 121
	xmm31 = 122
	ymm0 = 123
	ymm1 = 124
	ymm2 = 125
	ymm3 = 126
	ymm4 = 127
	ymm5 = 128
	ymm6 = 129
	ymm7 = 130
	ymm8 = 131
	ymm9 = 132
	ymm10 = 133
	ymm11 = 134
	ymm12 = 135
	ymm13 = 136
	ymm14 = 137
	ymm15 = 138
	ymm16 = 139
	ymm17 = 140
	ymm18 = 141
	ymm19 = 142
	ymm20 = 143
	ymm21 = 144
	ymm22 = 145
	ymm23 = 146
	ymm24 = 147
	ymm25 = 148
	ymm26 = 149
	ymm27 = 150
	ymm28 = 151
	ymm29 = 152
	ymm30 = 153
	ymm31 = 154
	zmm0 = 155
	zmm1 = 156
	zmm2 = 157
	zmm3 = 158
	zmm4 = 159
	zmm5 = 160
	zmm6 = 161
	zmm7 = 162
	zmm8 = 163
	zmm9 = 164
	zmm10 = 165
	zmm11 = 166
	zmm12 = 167
	zmm13 = 168
	zmm14 = 169
	zmm15 = 170
	zmm16 = 171
	zmm17 = 172
	zmm18 = 173
	zmm19 = 174
	zmm20 = 175
	zmm21 = 176
	zmm22 = 177
	zmm23 = 178
	zmm24 = 179
	zmm25 = 180
	zmm26 = 181
	zmm27 = 182
	zmm28 = 183
	zmm29 = 184
	zmm30 = 185
	zmm31 = 186
	k0 = 187
	k1 = 188
	k2 = 189
	k3 = 190
	k4 = 191
	k5 = 192
	k6 = 193
	k7 = 194
	mxcsr = 195
	mxcsrmask = 196
	orig_rax = 197
	fpcw = 198
	fpsw = 199
	fptag = 200
	fpip_off = 201
	fpip_sel = 202
	fpopcode = 203
	fpdp_off = 204
	fpdp_sel = 205
	fptag_full = 206
	st0 = 207
	st1 = 208
	st2 = 209
	st3 = 210
	st4 = 211
	st5 = 212
	st6 = 213
	st7 = 214
	dr0 = 215
	dr1 = 216
	dr2 = 217
	dr3 = 218
	dr4 = 219
	dr5 = 220
	dr6 = 221
	dr7 = 222
	cr0 = 223
	cr1 = 224
	cr2 = 225
	cr3 = 226
	cr4 = 227
	tssr = 228
	ldtr = 229
	tr = 230
	tr3 = 231
	tr4 = 232
	tr5 = 233
	tr6 = 234
	tr7 = 235
	r_status_flags = 236
	rdf = 237
	seg_gs_base = 238
	seg_fs_base = 239
	inst_g0 = 240
	inst_g1 = 241
	inst_g2 = 242
	inst_g3 = 243
	inst_g4 = 244
	inst_g5 = 245
	inst_g6 = 246
	inst_g7 = 247
	inst_g8 = 248
	inst_g9 = 249
	inst_g10 = 250
	inst_g11 = 251
	inst_g12 = 252
	inst_g13 = 253
	inst_g14 = 254
	inst_g15 = 255
	inst_g16 = 256
	inst_g17 = 257
	inst_g18 = 258
	inst_g19 = 259
	inst_g20 = 260
	inst_g21 = 261
	inst_g22 = 262
	inst_g23 = 263
	inst_g24 = 264
	inst_g25 = 265
	inst_g26 = 266
	inst_g27 = 267
	inst_g28 = 268
	inst_g29 = 269
	buf_base0 = 270
	buf_base1 = 271
	buf_base2 = 272
	buf_base3 = 273
	buf_base4 = 274
	buf_base5 = 275
	buf_base6 = 276
	buf_base7 = 277
	buf_base8 = 278
	buf_base9 = 279
	buf_end0 = 280
	buf_end1 = 281
	buf_end2 = 282
	buf_end3 = 283
	buf_end4 = 284
	buf_end5 = 285
	buf_end6 = 286
	buf_end7 = 287
	buf_end8 = 288
	buf_end9 = 289
	inst_g0d = 290
	inst_g1d = 291
	inst_g2d = 292
	inst_g3d = 293
	inst_g4d = 294
	inst_g5d = 295
	inst_g6d = 296
	inst_g7d = 297
	inst_g8d = 298
	inst_g9d = 299
	inst_g10d = 300
	inst_g11d = 301
	inst_g12d = 302
	inst_g13d = 303
	inst_g14d = 304
	inst_g15d = 305
	inst_g16d = 306
	inst_g17d = 307
	inst_g18d = 308
	inst_g19d = 309
	inst_g20d = 310
	inst_g21d = 311
	inst_g22d = 312
	inst_g23d = 313
	inst_g24d = 314
	inst_g25d = 315
	inst_g26d = 316
	inst_g27d = 317
	inst_g28d = 318
	inst_g29d = 319
	x87 = 320
	seg_gs_val = 321
	seg_fs_val = 322
	pin_edi = 323
	pin_esi = 324
	pin_ebp = 325
	pin_esp = 326
	pin_ebx = 327
	pin_edx = 328
	pin_ecx = 329
	pin_eax = 330
	pin_al = 331
	pin_ah = 332
	pin_ax = 333
	pin_cl = 334
	pin_ch = 335
	pin_cx = 336
	pin_dl = 337
	pin_dh = 338
	pin_dx = 339
	pin_bl = 340
	pin_bh = 341
	pin_bx = 342
	pin_bp = 343
	pin_si = 344
	pin_di = 345
	pin_sp = 346
	pin_rdi = 347
	pin_rsi = 348
	pin_rbp = 349
	pin_stack_ptr = 350
	pin_rbx = 351
	pin_rdx = 352
	pin_rcx = 353
	pin_rax = 354
	pin_r8 = 355
	pin_r9 = 356
	pin_r10 = 357
	pin_r11 = 358
	pin_r12 = 359
	pin_r13 = 360
	pin_r14 = 361
	pin_r15 = 362
	pin_dil = 363
	pin_sil = 364
	pin_bpl = 365
	pin_spl = 366
	pin_r8b = 367
	pin_r8w = 368
	pin_r8d = 369
	pin_r9b = 370
	pin_r9w = 371
	pin_r9d = 372
	pin_r10b = 373
	pin_r10w = 374
	pin_r10d = 375
	pin_r11b = 376
	pin_r11w = 377
	pin_r11d = 378
	pin_r12b = 379
	pin_r12w = 380
	pin_r12d = 381
	pin_r13b = 382
	pin_r13w = 383
	pin_r13d = 384
	pin_r14b = 385
	pin_r14w = 386
	pin_r14d = 387
	pin_r15b = 388
	pin_r15w = 389
	pin_r15d = 390
	pin_threadid = 391
	pin_indirreg = 392
	pin_ipreladdr = 393
	pin_sysenter_resumeaddr = 394
	pin_syscall_next_pc = 395
	pin_vmenter = 396
	pin_t0 = 397
	pin_t1 = 398
	pin_t2 = 399
	pin_t3 = 400
	pin_t0d = 401
	pin_t1d = 402
	pin_t2d = 403
	pin_t3d = 404
	pin_t0w = 405
	pin_t1w = 406
	pin_t2w = 407
	pin_t3w = 408
	pin_t0l = 409
	pin_t1l = 410
	pin_t2l = 411
	pin_t3l = 412
	UNKNOWN_REG_413 = 413
	inst_cond = 414
	inst_t0 = 415
	inst_t1 = 416
	inst_t2 = 417
	inst_t3 = 418
	inst_t0d = 419
	inst_t1d = 420
	inst_t2d = 421
	inst_t3d = 422
	inst_t0w = 423
	inst_t1w = 424
	inst_t2w = 425
	inst_t3w = 426
	inst_t0l = 427
	inst_t1l = 428
	inst_t2l = 429
	inst_t3l = 430
	preserved_predicate = 431
	flags_before_ac_clearing = 432
	pin_bridge_orig_sp = 433
	pin_bridge_app_ip = 434
	pin_bridge_sp_before_align = 435
	pin_bridge_sp_before_call = 436
	pin_bridge_sp_before_marshalling_frame = 437
	pin_bridge_marshalling_frame = 438
	pin_bridge_on_stack_context_frame = 439
	pin_bridge_on_stack_context_sp = 440
	pin_bridge_multi_memoryaccess_frame = 441
	pin_bridge_multi_memoryaccess_sp = 442
	pin_multi_mem_access_and_rewrite_eumlation_info_frame = 443
	pin_bridge_trans_memory_callback_frame = 444
	pin_bridge_trans_memory_callback_sp = 445
	pin_trans_memory_callback_read_addr = 446
	pin_trans_memory_callback_read2_addr = 447
	pin_trans_memory_callback_write_addr = 448
	pin_bridge_spill_area_context_frame = 449
	pin_bridge_spill_area_context_sp = 450
	pin_avx_in_use = 451
	pin_spillptr = 452
	pin_x87 = 453
	pin_mxcsr = 454
	pin_status_flags = 455
	pin_df = 456
	pin_flags = 457
	pin_xmm0 = 458
	pin_xmm1 = 459
	pin_xmm2 = 460
	pin_xmm3 = 461
	pin_xmm4 = 462
	pin_xmm5 = 463
	pin_xmm6 = 464
	pin_xmm7 = 465
	pin_xmm8 = 466
	pin_xmm9 = 467
	pin_xmm10 = 468
	pin_xmm11 = 469
	pin_xmm12 = 470
	pin_xmm13 = 471
	pin_xmm14 = 472
	pin_xmm15 = 473
	pin_xmm16 = 474
	pin_xmm17 = 475
	pin_xmm18 = 476
	pin_xmm19 = 477
	pin_xmm20 = 478
	pin_xmm21 = 479
	pin_xmm22 = 480
	pin_xmm23 = 481
	pin_xmm24 = 482
	pin_xmm25 = 483
	pin_xmm26 = 484
	pin_xmm27 = 485
	pin_xmm28 = 486
	pin_xmm29 = 487
	pin_xmm30 = 488
	pin_xmm31 = 489
	pin_ymm0 = 490
	pin_ymm1 = 491
	pin_ymm2 = 492
	pin_ymm3 = 493
	pin_ymm4 = 494
	pin_ymm5 = 495
	pin_ymm6 = 496
	pin_ymm7 = 497
	pin_ymm8 = 498
	pin_ymm9 = 499
	pin_ymm10 = 500
	pin_ymm11 = 501
	pin_ymm12 = 502
	pin_ymm13 = 503
	pin_ymm14 = 504
	pin_ymm15 = 505
	pin_ymm16 = 506
	pin_ymm17 = 507
	pin_ymm18 = 508
	pin_ymm19 = 509
	pin_ymm20 = 510
	pin_ymm21 = 511
	pin_ymm22 = 512
	pin_ymm23 = 513
	pin_ymm24 = 514
	pin_ymm25 = 515
	pin_ymm26 = 516
	pin_ymm27 = 517
	pin_ymm28 = 518
	pin_ymm29 = 519
	pin_ymm30 = 520
	pin_ymm31 = 521
	pin_zmm0 = 522
	pin_zmm1 = 523
	pin_zmm2 = 524
	pin_zmm3 = 525
	pin_zmm4 = 526
	pin_zmm5 = 527
	pin_zmm6 = 528
	pin_zmm7 = 529
	pin_zmm8 = 530
	pin_zmm9 = 531
	pin_zmm10 = 532
	pin_zmm11 = 533
	pin_zmm12 = 534
	pin_zmm13 = 535
	pin_zmm14 = 536
	pin_zmm15 = 537
	pin_zmm16 = 538
	pin_zmm17 = 539
	pin_zmm18 = 540
	pin_zmm19 = 541
	pin_zmm20 = 542
	pin_zmm21 = 543
	pin_zmm22 = 544
	pin_zmm23 = 545
	pin_zmm24 = 546
	pin_zmm25 = 547
	pin_zmm26 = 548
	pin_zmm27 = 549
	pin_zmm28 = 550
	pin_zmm29 = 551
	pin_zmm30 = 552
	pin_zmm31 = 553
	pin_k0 = 554
	pin_k1 = 555
	pin_k2 = 556
	pin_k3 = 557
	pin_k4 = 558
	pin_k5 = 559
	pin_k6 = 560
	pin_k7 = 561    

# intel Pin 3.21's instruction categories
class NodeType(Enum):
	TYPE_INVALID = 0
	TYPE_3DNOW = 1
	TYPE_ADOX_ADCX = 2
	TYPE_AES = 3
	TYPE_AMX_TILE = 4
	TYPE_AVX = 5
	TYPE_AVX2 = 6
	TYPE_AVX2GATHER = 7
	TYPE_AVX512 = 8
	TYPE_AVX512_4FMAPS = 9
	TYPE_AVX512_4VNNIW = 10
	TYPE_AVX512_BITALG = 11
	TYPE_AVX512_VBMI = 12
	TYPE_AVX512_VP2INTERSECT = 13
	TYPE_BINARY = 14
	TYPE_BITBYTE = 15
	TYPE_BLEND = 16
	TYPE_BMI1 = 17
	TYPE_BMI2 = 18
	TYPE_BROADCAST = 19
	TYPE_CALL = 20
	TYPE_CET = 21
	TYPE_CLDEMOTE = 22
	TYPE_CLFLUSHOPT = 23
	TYPE_CLWB = 24
	TYPE_CLZERO = 25
	TYPE_CMOV = 26
	TYPE_COMPRESS = 27
	TYPE_COND_BR = 28
	TYPE_CONFLICT = 29
	TYPE_CONVERT = 30
	TYPE_DATAXFER = 31
	TYPE_DECIMAL = 32
	TYPE_ENQCMD = 33
	TYPE_EXPAND = 34
	TYPE_FCMOV = 35
	TYPE_FLAGOP = 36
	TYPE_FMA4 = 37
	TYPE_FP16 = 38
	TYPE_GATHER = 39
	TYPE_GFNI = 40
	TYPE_HRESET = 41
	TYPE_IFMA = 42
	TYPE_INTERRUPT = 43
	TYPE_IO = 44
	TYPE_IOSTRINGOP = 45
	TYPE_KEYLOCKER = 46
	TYPE_KEYLOCKER_WIDE = 47
	TYPE_KMASK = 48
	TYPE_LEGACY = 49
	TYPE_LOGICAL = 50
	TYPE_LOGICAL_FP = 51
	TYPE_LZCNT = 52
	TYPE_MISC = 53
	TYPE_MMX = 54
	TYPE_MOVDIR = 55
	TYPE_MPX = 56
	TYPE_NOP = 57
	TYPE_PCLMULQDQ = 58
	TYPE_PCONFIG = 59
	TYPE_PKU = 60
	TYPE_POP = 61
	TYPE_PREFETCH = 62
	TYPE_PREFETCHWT1 = 63
	TYPE_PTWRITE = 64
	TYPE_PUSH = 65
	TYPE_RDPID = 66
	TYPE_RDPRU = 67
	TYPE_RDRAND = 68
	TYPE_RDSEED = 69
	TYPE_RDWRFSGS = 70
	TYPE_RET = 71
	TYPE_ROTATE = 72
	TYPE_SCATTER = 73
	TYPE_SEGOP = 74
	TYPE_SEMAPHORE = 75
	TYPE_SERIALIZE = 76
	TYPE_SETCC = 77
	TYPE_SGX = 78
	TYPE_SHA = 79
	TYPE_SHIFT = 80
	TYPE_SMAP = 81
	TYPE_SSE = 82
	TYPE_STRINGOP = 83
	TYPE_STTNI = 84
	TYPE_SYSCALL = 85
	TYPE_SYSRET = 86
	TYPE_SYSTEM = 87
	TYPE_TBM = 88
	TYPE_TSX_LDTRK = 89
	TYPE_UINTR = 90
	TYPE_UNCOND_BR = 91
	TYPE_VAES = 92
	TYPE_VBMI2 = 93
	TYPE_VEX = 94
	TYPE_VFMA = 95
	TYPE_VIA_PADLOCK = 96
	TYPE_VPCLMULQDQ = 97
	TYPE_VTX = 98
	TYPE_WAITPKG = 99
	TYPE_WIDENOP = 100
	TYPE_X87_ALU = 101
	TYPE_XOP = 102
	TYPE_XSAVE = 103
	TYPE_XSAVEOPT = 104
	TYPE_LAST = 105


class DynNode:
	def __init__(self, node_id: int, addr: int, offset: int, img: str, inst_bytes: bytearray, ins_type: NodeType, fn_offset: int, fn_name: int):
		self.id: int = node_id
		self.addr: int = addr
		self.offset: int = offset
		self.img_name: str = os.path.basename(img)
		self.inst_bytes: bytearray = inst_bytes
		self.type: NodeType = ins_type
		self.fn_offset: int = fn_offset
		self.fn_name: str = fn_name
		self.data_edges: Dict[REG, List[DynNode]] = {} # data-flow nodes with id
		self.deref_edges: Dict[REG, List[DynNode]] = {}
		self.cf_edges: List[DynNode] = [] # control-flow nodes wit id
		
		self.out_data_edges: List[DynNode] = []

	@property
	def data_srcs(self) -> list[REG]:
		return [src for src in self.data_edges.keys()]
	
	@property
	def deref_srcs(self) -> List[REG]:
		return [src for src in self.deref_edges.keys()]

	def disassemble(self) -> str:
		md = Cs(CS_ARCH_X86, CS_MODE_64)

		for i in md.disasm(self.inst_bytes, 0x0, count=1):
			result = "%s %s" % (i.mnemonic, i.op_str)
		
		return result

	def get_edges(self, src: REG) -> List[DynNode]:
		if src in self.data_edges.keys():
			return self.data_edges[src]
		elif src in self.deref_edges.keys():
			return self.deref_edges[src]
		else:
			return None

	def add_data_edge(self, src: REG, node: DynNode):
		self.data_edges[src].append(node)
		node.out_data_edges.append(self)

	def add_deref_edge(self, src: REG, node: DynNode):
		self.deref_edges[src].append(node)

	def follow_single_edge(self, edge_src: REG) -> DynNode:
		types_to_follow = [NodeType.TYPE_DATAXFER, NodeType.TYPE_POP, NodeType.TYPE_PUSH]

		edges = self.get_edges(edge_src)

		if edges == None:
			print("Error: invalid edge source")
			return None

		if len(edges) != 1:
			return self

		cur_node: DynNode = self
		next_node: DynNode = edges[0]
		visited = set()

		while True:
			if len(next_node.data_srcs) == 0:
				# it's immediate value transfer instruction. e.g., mov eax, 0x1
				return next_node

			if (next_node.type not in types_to_follow) or (len(next_node.data_edges) != 1):
				return cur_node

			if next_node.addr in visited: # prevent infinite cycle
				return cur_node

			cur_node = edges[0]
			visited.add(cur_node.addr)

			# get edges
			edge_src = next(iter(cur_node.data_srcs))
			edges = cur_node.get_edges(edge_src)

			if len(edges) != 1:
				return cur_node

			next_node = edges[0]

class DynFn:
	def __init__(self, addr: int, offset: int, img: str, hit_cnt: int, fn_name: str = "none"):
		self.addr: int = addr
		self.offset: int = offset
		self.img_name: str = os.path.basename(img)
		self.fn_name: str = fn_name
		self.hit_cnt: int = hit_cnt
